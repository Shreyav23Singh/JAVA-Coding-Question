Problem Statement: Given the head of a linked list, print the length of the linked list.

Example 1:
Input Format: 0->1->2
Result: 3
Explanation: The list has a total of 3 nodes, thus the length of the list is 3.
------------------------------------------------------------------ Solution ------------------------------------------------------------------------------------

Approach: Counting the Nodes in a Linked List
1. Understanding the Problem
Given the head of a singly linked list, we need to count the number of nodes in the list.

Linked List: 2 → 3 → 5 → 8 → NULL
Output: 4

2. Approach to Solve the Problem
Initialize a Counter: Start with count = 0.
Traverse the List: Start from the head and move to the next node until reaching null.
Increment the Counter: For each node encountered, increase the counter by 1.
Return the Counter: Once the traversal is complete, return the count.


class Node {
    int data;
    Node next;

    // Constructor for creating a node
    Node(int data1, Node next1) {
        this.data = data1;
        this.next = next1;
    }

    Node(int data1) { // Last node will point to null
        this.data = data1;
        this.next = null;
    }
}

class MyLinkedList {
    // Function to find the length of the linked list
    public static int LengthOfAll(Node head) {
        int count = 0;
        Node temp = head;

        while (temp != null) { // Traverse until end
            count++;
            temp = temp.next;
        }
        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        int[] arr = {2, 3, 5, 8};

        // Creating a linked list
        Node head = new Node(arr[0]);
        head.next = new Node(arr[1]);
        head.next.next = new Node(arr[2]);
        head.next.next.next = new Node(arr[3]);

        // Calling the function and printing the length
        System.out.println(MyLinkedList.LengthOfAll(head)); 
    }
}

# Time Complexity (TC) #
We traverse the linked list once, visiting each node exactly one time.

If there are N nodes, the loop runs N times.

Time Complexity: O(N) (linear time)

# Space Complexity (SC) #
We use only a few integer variables (count, temp).

We do not use extra space proportional to the input size.

Space Complexity: O(1) (constant space) 
