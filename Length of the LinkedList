Problem Statement: Given the head of a linked list, print the length of the linked list.

Example 1:
Input Format: 0->1->2
Result: 3
Explanation: The list has a total of 3 nodes, thus the length of the list is 3.
------------------------------------------------------------------ Solution ------------------------------------------------------------------------------------

Approach: Counting the Nodes in a Linked List
1. Understanding the Problem
Given the head of a singly linked list, we need to count the number of nodes in the list.

Linked List: 2 → 3 → 5 → 8 → NULL
Output: 4

2. Approach to Solve the Problem
Initialize a Counter: Start with count = 0.
Traverse the List: Start from the head and move to the next node until reaching null.
Increment the Counter: For each node encountered, increase the counter by 1.
Return the Counter: Once the traversal is complete, return the count.


// Class representing a single node in the linked list
class Node {
    int data;   // Stores the data value of the node
    Node next;  // Reference to the next node in the linked list

    // Constructor to initialize a node with data and a reference to the next node
    Node(int data1, Node next1) {
        this.data = data1;
        this.next = next1;
    }

    // Constructor to initialize a node with data only (next is set to null by default)
    Node(int data1) { 
        this.data = data1;
        this.next = null;
    }
}

// Class containing utility functions for the linked list
public class MyLinkedList {
    
    // Method to calculate the length of the linked list
    public static int LengthOffAll(Node head) {
        int count = 0;   // Initialize count to 0
        Node temp = head; // Temporary pointer to traverse the linked list

        // Traverse the linked list until reaching the last node (null)
        while (temp != null) {
            count++;        // Increment count for each node
            temp = temp.next; // Move to the next node
        }
        return count;  // Return the total count of nodes
    }
}

// Main class to execute the program
class Main {
    public static void main(String[] args) {

        // Array representing data values to be inserted in the linked list
        int[] arr = {2, 3, 5, 8};

        // Creating the linked list and linking nodes together
        Node head = new Node(arr[0]);         // Create the first node with value 2
        head.next = new Node(arr[1]);         // Link second node (value 3) to first node
        head.next.next = new Node(arr[2]);    // Link third node (value 5) to second node
        head.next.next.next = new Node(arr[3]); // Link fourth node (value 8) to third node

        // Call the method to find the length of the linked list and print the result
        System.out.println(MyLinkedList.LengthOffAll(head));  // Expected output: 4
    }
}


# Time Complexity (TC) #
We traverse the linked list once, visiting each node exactly one time.

If there are N nodes, the loop runs N times.

Time Complexity: O(N) (linear time)

# Space Complexity (SC) #
We use only a few integer variables (count, temp).

We do not use extra space proportional to the input size.

Space Complexity: O(1) (constant space) 
