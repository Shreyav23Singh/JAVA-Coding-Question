Given the head of a linked list and an integer value, find out whether the integer is present in the linked list or not. Return true if it is present, or else return false.
Example 1:

Input Format: 0->1->2, val = 2

Result True

Explanation: Since element 2 is present in the list, it will return true.

------------------------------------------------------------------------------ Solution -----------------------------------------------------------------------

// Node class representing a single node in the linked list
class Node {
    int data;  // Stores the data of the node
    Node next; // Pointer to the next node in the linked list

    // Constructor to initialize a node with data and the reference to the next node
    Node(int data1, Node next1) {
        this.data = data1;
        this.next = next1;
    }

    // Constructor to initialize a node with data and set next as null (for the last node)
    Node(int data1) {  
        this.data = data1;
        this.next = null;
    }
}

// Class containing methods to operate on a linked list
public class MyLinkedList {

    // Method to search for a given value in the linked list
    public static boolean LengthOffAll(Node head, int val) {
        Node temp = head; // Start traversal from the head of the linked list

        // Traverse the linked list until we reach the end (null)
        while (temp != null) {
            if (temp.data == val) { // If the current node's data matches the value, return true
                return true;
            }
            temp = temp.next; // Move to the next node
        }
        
        return false; // If value is not found, return false
    }
}

// Main class to test the linked list search function
class Main {
    public static void main(String[] args) {

        // Creating an array of integers
        int[] arr = {2, 3, 5, 8};

        // Creating the linked list manually using the array elements
        Node head = new Node(arr[0]); // First node (head)
        head.next = new Node(arr[1]); // Second node
        head.next.next = new Node(arr[2]); // Third node
        head.next.next.next = new Node(arr[3]); // Fourth node

        int val = 98; // Value to search in the linked list

        // Call the search function and print the result
        System.out.println(MyLinkedList.LengthOffAll(head, val)); // Output will be false
    }
}

# Time Complexity (TC)
The function traverses the linked list once, checking each node's data to see if it matches val.

In the worst case, it has to go through all N nodes (if the value is not present or is the last node).

Best case: If the value is found at the head, it returns immediately (O(1)).

Worst case: If the value is not present, it checks all nodes (O(N)).

✅ Time Complexity: O(N), where N is the number of nodes in the linked list.

✅ Space Complexity: O(1) (constant space).
